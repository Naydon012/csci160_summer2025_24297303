module toUpper (
    input  [7:0] A,     // 8-bit ASCII input character
    output [7:0] F      // 8-bit output character (converted to uppercase if needed)
);

   wires
    wire A7_not;            // ~A[7]
    wire A6_and_A5;         // A[6] & A[5]
    wire lowercase;         // True if A is a lowercase letter
    wire not_lowercase;     // ~lowercase



 
 
 
  genvar i;
  generate
   
    for(i = 0; i < 8; i = i + 1) begin : gen_upper
        wire masked_bit, pass_bit, not_range, use_maked, use_maked, use_original;
        if (i==5) begin
            and (masked_bit, char_in[i], 1'b0);
        end else begin
            assign masked_bit = char_in[i];
            end
            not (not_range, in_range);
            and (use_maked, masked_bit, in_range);
            and (use_original, char_in[i], not_range);
            or (char_out[i], use_maked, use_original);
        end
   endgenerate
 
endmodule

    assign in_range = (char_in >= 8'd97) && (char_in <= 8'd122);

    assign char_out =in_range ? (char_in & 8'b11011111) : char_in;




endmodule




